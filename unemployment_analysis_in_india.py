# -*- coding: utf-8 -*-
"""Unemployment Analysis in India

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HmQ7rFzvKz-D-pnSXhrbgKSX8PFBSo6S
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import kagglehub
import os


# This command downloads the dataset from Kaggle and then pandas reads it.
print("Downloading the unemployment dataset...")
try:
    path = kagglehub.dataset_download("gokulrajkmv/unemployment-in-india")
    csv_file_path = os.path.join(path, "Unemployment in India.csv")
    df = pd.read_csv(csv_file_path)
except Exception as e:
    print(f"Error downloading or loading the dataset: {e}")
    # If the download fails, we create a dummy DataFrame for demonstration
    data = {'Region': ['Urban', 'Urban', 'Rural', 'Rural'],
            'Date': ['31-01-2020', '29-02-2020', '31-01-2020', '29-02-2020'],
            'Frequency': ['M', 'M', 'M', 'M'],
            'Estimated Unemployment Rate (%)': [7.0, 7.5, 6.0, 6.5],
            'Estimated Employed': [120000000, 125000000, 250000000, 255000000],
            'Estimated Labour Participation Rate %': [40.5, 41.0, 42.0, 42.5],
            'Area': ['Gujarat', 'Gujarat', 'Uttar Pradesh', 'Uttar Pradesh']}
    df = pd.DataFrame(data)

print("\nDataset loaded successfully. Here are the first 5 rows:")
print(df.head())


# Rename columns for easier handling and convert the 'Date' column to a DateTime format.
df.columns = ['Region', 'Date', 'Frequency', 'Unemployment_Rate', 'Employed', 'Labour_Participation_Rate', 'Area']

# Convert the 'Date' column to datetime format for time series analysis.
df['Date'] = pd.to_datetime(df['Date'], dayfirst=True)

print("\n'Date' column converted successfully to datetime.")
print(df.info())


# We'll create a line plot to track the unemployment rate over time.
plt.style.use('seaborn-v0_8-whitegrid')
plt.figure(figsize=(15, 7))
sns.lineplot(x='Date', y='Unemployment_Rate', hue='Region', data=df)
plt.title('Unemployment Rate in India Over Time (Urban vs. Rural)', fontsize=16)
plt.xlabel('Date')
plt.ylabel('Unemployment Rate (%)')
plt.legend(title='Region')
plt.show()


# We'll plot the data around the main lockdown period to highlight the pandemic's effect.
plt.figure(figsize=(15, 7))
sns.lineplot(x='Date', y='Unemployment_Rate', hue='Region', data=df)
plt.axvline(x=pd.to_datetime('2020-03-25'), color='r', linestyle='--', label='Start of Lockdown')
plt.axvline(x=pd.to_datetime('2020-05-31'), color='g', linestyle='--', label='End of Lockdown')
plt.title('Impact of COVID-19 on Unemployment Rate', fontsize=16)
plt.xlabel('Date')
plt.ylabel('Unemployment Rate (%)')
plt.legend(title='Region')
plt.ylim(0, 30) # Set Y-axis limit to make the impact clearer
plt.show()


# Print a summary of the analysis.
print("\n" + "="*50)
print("             Key Insights from Analysis             ")
print("="*50)

# Find the highest recorded unemployment rate
max_unemployment = df.loc[df['Unemployment_Rate'].idxmax()]
print(f"Highest recorded unemployment rate: {max_unemployment['Unemployment_Rate']:.2f}% in {max_unemployment['Date'].strftime('%B %Y')}.")

# Analyze the primary impact of COVID-19
covid_period = df[(df['Date'] >= '2020-03-01') & (df['Date'] <= '2020-05-31')]
max_covid_unemp = covid_period['Unemployment_Rate'].max()
print(f"During the COVID-19 lockdown (March - May 2020), unemployment rose sharply, peaking at: {max_covid_unemp:.2f}%.")

# Analyze regional trends
urban_avg = df[df['Region'] == 'Urban']['Unemployment_Rate'].mean()
rural_avg = df[df['Region'] == 'Rural']['Unemployment_Rate'].mean()
print(f"Average unemployment rate in urban areas: {urban_avg:.2f}%")
print(f"Average unemployment rate in rural areas: {rural_avg:.2f}%")